esphome:
  name: dcbuddy
  comment: "Aquarium port controller"
  project:
    name: reefvolt.dcbuddy
    version: "v2"
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio
  friendly_name: DCBuddy
  on_boot:
    priority: 600
    then:
      - output.turn_on: power_led

dashboard_import:
  package_import_url: github://blueacro/reefvolt-dcbuddy/firmware/dcbuddy.yaml@main
  import_full_config: false # or true

network:
    enable_ipv6: true

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:
  logs:
    component: ERROR # Suppress warning logs from the display drawing for too long

# Enable Home Assistant API
api:
  reboot_timeout: 0s # Prevent rebooting if no HA is connected
  services:
    - service: reset_ocp # Service to reset all OCP states
      then:
        - lambda: |-
            id(power_resets_port)[0] = 0;
            id(power_resets_port)[1] = 0;
            id(power_resets_port)[2] = 0;
            id(power_resets_port)[3] = 0;
            id(power_resets_port)[4] = 0;
            id(power_resets_port)[5] = 0;
            id(power_resets_port)[6] = 0;

ota:

wifi:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "DCBuddy Fallback Hotspot"
    password: "password"

web_server:
  port: 80
  log: False

improv_serial:

captive_portal:

status_led:
  pin: GPIO3

font:
    - file: 'five.ttf'
      id: five
      size: 8
    - file: "refsan.ttf"
      id: refsan
      size: 9
    - file: "PixelGameFont.ttf"
      id: bigfont
      size: 14


display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    #address: 0x78
    update_interval: 1s
    lambda: |-

     int offset = 0;
     it.printf(0, 3+offset, id(five), "A");
     it.printf(8, offset, id(bigfont), "%1.2f", fabs(id(amps_A).state));

     it.printf(55, 3+offset, id(five), "E");
     it.printf(55+8, offset, id(bigfont), "%1.2f", fabs(id(amps_E).state));

     offset += 16;

     it.printf(0, 3+offset, id(five), "B");
     it.printf(8, offset, id(bigfont), "%1.2f", fabs(id(amps_B).state));

     it.printf(55, 3+offset, id(five), "F");
     it.printf(55+8, offset, id(bigfont), "%1.2f", fabs(id(amps_F).state));

     offset += 16;

     it.printf(0, 3+offset, id(five), "C");
     it.printf(8, offset, id(bigfont), "%1.2f", fabs(id(amps_C).state));

     it.printf(55, 3+offset, id(five), "G");
     it.printf(55+8, offset, id(bigfont), "%1.2f", fabs(id(amps_G).state));


     offset += 16;

     it.printf(0, 3+offset, id(five), "D");
     it.printf(8, offset, id(bigfont), "%1.2f", fabs(id(amps_D).state));


     it.set_rotation(DISPLAY_ROTATION_270_DEGREES);
     it.printf(20, 38, id(five), "AMPS");
     it.printf(30, 38+55, id(five), "AMPS");
     it.line(0,48,63,48);
     it.line(16,48+55,63,48+55);
     it.line(16,48,16,127);

     it.filled_rectangle(16,48+55,63,127);

     it.printf(23, 48+55+3, id(bigfont), COLOR_OFF, "%2.1f", id(volts_in).state);
     it.printf(25, 48+55+2+10, id(five), COLOR_OFF, "VOLTS");

     it.set_rotation(DISPLAY_ROTATION_0_DEGREES);


     it.printf(50, 46, id(refsan), "%s", id(ip1).state.c_str());

canbus:
  - platform: esp32_can
    tx_pin: GPIO0
    rx_pin: GPIO1
    bit_rate: 125kbps
    can_id: 4
    on_frame:
    - can_id: 500
      use_extended_id: false
      then:
      - lambda: |-
          std::string b(x.begin(), x.end());
          ESP_LOGI("can id 500", "%s", &b[0] );


globals:
  - id: power_resets_port
    type: int[7]
  - id: max_reset_port
    type: int
    initial_value: "10"


# Core port logic - one per port assignment to the sensor and the output state,
# as well as internal and external HomeAssistant switch object wiring

packages:
  port_a: !include
    file: 'packages/dcbuddy_port.yaml'
    vars:
      port: A
      port_id: 0
      ads1115_id: ads1115_1
      ads1115_multiplexer: 'A0_GND'
  port_b: !include
    file: 'packages/dcbuddy_port.yaml'
    vars:
      port: B
      port_id: 1
      ads1115_id: ads1115_1
      ads1115_multiplexer: 'A1_GND'
  port_c: !include
    file: 'packages/dcbuddy_port.yaml'
    vars:
      port: C
      port_id: 2
      ads1115_id: ads1115_1
      ads1115_multiplexer: 'A2_GND'
  port_d: !include
    file: 'packages/dcbuddy_port.yaml'
    vars:
      port: D
      port_id: 3
      ads1115_id: ads1115_1
      ads1115_multiplexer: 'A3_GND'
  port_e: !include
    file: 'packages/dcbuddy_port.yaml'
    vars:
      port: E
      port_id: 4
      ads1115_id: ads1115_2
      ads1115_multiplexer: 'A0_GND'
  port_f: !include
    file: 'packages/dcbuddy_port.yaml'
    vars:
      port: F
      port_id: 5
      ads1115_id: ads1115_2
      ads1115_multiplexer: 'A1_GND'
  port_g: !include
    file: 'packages/dcbuddy_port.yaml'
    vars:
      port: G
      port_id: 6
      ads1115_id: ads1115_2
      ads1115_multiplexer: 'A2_GND'

sensor:
  - platform: uptime
    name: Uptime Sensor
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    id: wifisignal
  - platform: ads1115
    ads1115_id: ads1115_2
    multiplexer: 'A3_GND'
    gain: 4.096
    name: "Input Voltage"
    id: volts_in
    update_interval: 1s
    on_value:
      then:
        - script.execute: port_A_voltage_update
        - script.execute: port_B_voltage_update
        - script.execute: port_C_voltage_update
        - script.execute: port_D_voltage_update
        - script.execute: port_E_voltage_update
        - script.execute: port_F_voltage_update
        - script.execute: port_G_voltage_update
    filters:
      - lambda: return x * ((10.0+1.2)/1.2);
      - or:
        - throttle: 15s # Reduce the update rate to HA if things don't change
        - delta: 0.05 # Or 50mV difference

i2c:
  sda: GPIO5
  scl: GPIO6
  scan: true
  id: bus_a
  frequency: 400kHz

ads1115:
  - address: 0x48
    id: ads1115_1
  - address: 0x49
    id: ads1115_2
pca9554:
  - id: 'pca9554a_device'
    address: 0x38

# A singleton delay sempahore script - every power on is staggered by 300ms and
# only one turn on script execution can run at the same time if covered by this
# mutex in script.wait
script:
  - id: port_semaphore
    mode: queued
    max_runs: 50
    then:
      - delay: 0.3s

# The actual output pins
output:
  - id: power_led
    platform: gpio
    pin: GPIO4

text_sensor:
  - platform: template
    name: "DCBuddy Firmware Version"
    id: dcbuddy_version
    entity_category: "diagnostic"
    lambda: |-
      return {"GIT_VERSION_FIELD"};
  - platform: template
    name: "OCP Count"
    entity_category: "diagnostic"
    lambda: |-
      return {("A:" + String(id(power_resets_port)[0]) + " B:" + String(id(power_resets_port)[1]) + 
      " C:" + String(id(power_resets_port)[2]) + " D:" + String(id(power_resets_port)[3]) + 
      " E:" + String(id(power_resets_port)[4]) + " F:" + String(id(power_resets_port)[5]) + 
      " G:" + String(id(power_resets_port)[6])).c_str() };
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      address_0:
        name: ESP IP Address 0
        id: ip1
      address_1:
        name: ESP IP Address 1
      address_2:
        name: ESP IP Address 2
      address_3:
        name: ESP IP Address 3
      address_4:
        name: ESP IP Address 4
    ssid:
      name: ESP Connected SSID
      id: wifi_ssid
    bssid:
      name: ESP Connected BSSID
      id: bssid
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results
    dns_address:
      name: ESP DNS Address
