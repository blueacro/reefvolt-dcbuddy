esphome:
  name: dcbuddy
  platformio_options:
    board_build.flash_mode: dio
  friendly_name: dcbuddy
  on_boot:
    priority: 600
    then:
      - output.turn_on: power_led

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:
  logs:
    component: ERROR # Suppress warning logs from the display drawing for too long

# Enable Home Assistant API
api:
  reboot_timeout: 0s # Prevent rebooting if no HA is connected

ota:

wifi:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "DCBuddy Fallback Hotspot"
    password: "password"

web_server:
  port: 80
  log: False

improv_serial:
  
captive_portal:

status_led:
  pin: GPIO3

font:
    - file: 'five.ttf'
      id: five
      size: 8
    - file: "refsan.ttf"
      id: refsan
      size: 9
    - file: "PixelGameFont.ttf"
      id: bigfont
      size: 14


display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    #address: 0x78
    update_interval: 1s
    lambda: |-

     int offset = 0;
     it.printf(0, 3+offset, id(five), "A");
     it.printf(8, offset, id(bigfont), "%1.2f", fabs(id(amps_a).state));

     it.printf(55, 3+offset, id(five), "E");
     it.printf(55+8, offset, id(bigfont), "%1.2f", fabs(id(amps_e).state));
     
     offset += 16;

     it.printf(0, 3+offset, id(five), "B");
     it.printf(8, offset, id(bigfont), "%1.2f", fabs(id(amps_b).state));

     it.printf(55, 3+offset, id(five), "F");
     it.printf(55+8, offset, id(bigfont), "%1.2f", fabs(id(amps_f).state));
     
     offset += 16;
     
     it.printf(0, 3+offset, id(five), "C");
     it.printf(8, offset, id(bigfont), "%1.2f", fabs(id(amps_c).state));

     it.printf(55, 3+offset, id(five), "G");
     it.printf(55+8, offset, id(bigfont), "%1.2f", fabs(id(amps_g).state));


     offset += 16;
     
     it.printf(0, 3+offset, id(five), "D");
     it.printf(8, offset, id(bigfont), "%1.2f", fabs(id(amps_d).state));
     

     it.set_rotation(DISPLAY_ROTATION_270_DEGREES);
     it.printf(20, 38, id(five), "AMPS");
     it.printf(30, 38+55, id(five), "AMPS");
     it.line(0,48,63,48);
     it.line(16,48+55,63,48+55);
     it.line(16,48,16,127);

     it.filled_rectangle(16,48+55,63,127);

     it.printf(23, 48+55+3, id(bigfont), COLOR_OFF, "%2.1f", id(volts_in).state);
     it.printf(25, 48+55+2+10, id(five), COLOR_OFF, "VOLTS");

     it.set_rotation(DISPLAY_ROTATION_0_DEGREES);


     it.printf(50, 46, id(refsan), "%s", id(ip1).state.c_str());

canbus:
  - platform: esp32_can
    tx_pin: GPIO0
    rx_pin: GPIO1
    bit_rate: 125kbps
    can_id: 4
    on_frame:
    - can_id: 500
      use_extended_id: false
      then:
      - lambda: |-
          std::string b(x.begin(), x.end());
          ESP_LOGI("can id 500", "%s", &b[0] );


globals:
  - id: power_resets_port
    type: int[7]
  - id: max_reset_port
    type: int
    initial_value: "10"


sensor:
  - platform: uptime
    name: Uptime Sensor
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    id: wifisignal
  - platform: ads1115
    ads1115_id: ads1115_1
    multiplexer: 'A0_GND'
    gain: 6.144
    name: "Port A Amps"
    id: amps_a
    update_interval: 1s
    unit_of_measurement: A
    filters: 
      - lambda: return x * (500.0/470.0);
    on_value_range: 
      - above: 4.70
        then:
          - switch.turn_off: port_a
          - lambda: id(power_resets_port)[0]++;
          - delay: 7.5s
          - if:
              condition:
                - lambda: return id(power_resets_port)[0] < id(max_reset_port) && id(switch_a).state;
              then:
                - script.execute: 
                    id: port_turn_on_safe
                    port_id: 0
  - platform: ads1115
    ads1115_id: ads1115_1
    multiplexer: 'A1_GND'
    gain: 6.144
    name: "Port B Amps"
    id: amps_b
    update_interval: 1s
    unit_of_measurement: A
    filters: 
      - lambda: return x * (500.0/470.0);
    on_value_range: 
      - above: 4.70
        then:
          - switch.turn_off: port_b
          - lambda: id(power_resets_port)[1]++;
          - delay: 7.5s
          - if:
              condition:
                - lambda: return id(power_resets_port)[1] < id(max_reset_port) && id(switch_b).state;
              then:
                - script.execute: 
                    id: port_turn_on_safe
                    port_id: 1
  - platform: ads1115
    ads1115_id: ads1115_1
    multiplexer: 'A2_GND'
    gain: 6.144
    name: "Port C Amps"
    id: amps_c
    update_interval: 1s
    unit_of_measurement: A
    filters: 
      - lambda: return x * (500.0/470.0);
    on_value_range: 
      - above: 4.70
        then:
          - switch.turn_off: port_c
          - lambda: id(power_resets_port)[2]++;
          - delay: 7.5s
          - if:
              condition:
                - lambda: return id(power_resets_port)[2] < id(max_reset_port) && id(switch_c).state;
              then:
                - script.execute: 
                    id: port_turn_on_safe
                    port_id: 2
  - platform: ads1115
    ads1115_id: ads1115_1
    multiplexer: 'A3_GND'
    gain: 6.144
    name: "Port D Amps"
    id: amps_d
    update_interval: 1s
    unit_of_measurement: A
    filters: 
      - lambda: return x * (500.0/470.0);
    on_value_range: 
      - above: 4.70
        then:
          - switch.turn_off: port_d
          - lambda: id(power_resets_port)[3]++;
          - delay: 7.5s
          - if:
              condition:
                - lambda: return id(power_resets_port)[3] < id(max_reset_port) && id(switch_d).state;
              then:
                - script.execute: 
                    id: port_turn_on_safe
                    port_id: 3
  - platform: ads1115
    ads1115_id: ads1115_2
    multiplexer: 'A0_GND'
    gain: 6.144
    name: "Port E Amps"
    id: amps_e
    update_interval: 1s
    unit_of_measurement: A
    filters: 
      - lambda: return x * (500.0/470.0);
    on_value_range: 
      - above: 4.70
        then:
          - switch.turn_off: port_e
          - lambda: id(power_resets_port)[4]++;
          - delay: 7.5s
          - if:
              condition:
                - lambda: return id(power_resets_port)[4] < id(max_reset_port) && id(switch_e).state;
              then:
                - script.execute: 
                    id: port_turn_on_safe
                    port_id: 4
  - platform: ads1115
    ads1115_id: ads1115_2
    multiplexer: 'A1_GND'
    gain: 6.144
    name: "Port F Amps"
    id: amps_f
    update_interval: 1s
    unit_of_measurement: A
    filters: 
      - lambda: return x * (500.0/470.0);
    on_value_range: 
      - above: 4.70
        then:
          - switch.turn_off: port_f
          - lambda: id(power_resets_port)[5]++;
          - delay: 7.5s
          - if:
              condition:
                - lambda: return id(power_resets_port)[5] < id(max_reset_port) && id(switch_f).state;
              then:
                - script.execute: 
                    id: port_turn_on_safe
                    port_id: 5
  - platform: ads1115
    ads1115_id: ads1115_2
    multiplexer: 'A2_GND'
    gain: 6.144
    name: "Port G Amps"
    id: amps_g
    update_interval: 1s
    unit_of_measurement: A
    filters: 
      - lambda: return x * (500.0/470.0);
    on_value_range: 
      - above: 4.70
        then:
          - switch.turn_off: port_g
          - lambda: id(power_resets_port)[6]++;
          - delay: 7.5s
          - if:
              condition:
                - lambda: return id(power_resets_port)[6] < id(max_reset_port) && id(switch_g).state;
              then:
                - script.execute: 
                    id: port_turn_on_safe
                    port_id: 6
  - platform: ads1115
    ads1115_id: ads1115_2
    multiplexer: 'A3_GND'
    gain: 4.096
    name: "Input Voltage"
    id: volts_in
    update_interval: 1s
    filters:
      - lambda: return x * ((10.0+1.2)/1.2);

i2c:
  sda: GPIO5
  scl: GPIO6
  scan: true
  id: bus_a
  frequency: 400kHz

ads1115:
  - address: 0x48
    id: ads1115_1
  - address: 0x49
    id: ads1115_2
pca9554:
  - id: 'pca9554a_device'
    address: 0x38

# Actual output status
binary_sensor:
  - platform: template
    id: state_a
    name: "Port A State"
    lambda: return id(port_a).state;
  - platform: template
    id: state_b
    name: "Port B State"
    lambda: return id(port_b).state;
  - platform: template
    id: state_c
    name: "Port C State"
    lambda: return id(port_c).state;
  - platform: template
    id: state_d
    name: "Port D State"
    lambda: return id(port_d).state;
  - platform: template
    id: state_e
    name: "Port E State"
    lambda: return id(port_e).state;
  - platform: template
    id: state_f
    name: "Port F State"
    lambda: return id(port_f).state;
  - platform: template
    id: state_g
    name: "Port G State"
    lambda: return id(port_g).state;

script:
  - id: port_turn_on_safe
    mode: queued
    max_runs: 30
    parameters: 
      port_id: int
    then: 
      - delay: 0.3s
      - lambda: |-
          static std::map<int, switch_::Switch*> output_map {
            { 0, id(port_a) },
            { 1, id(port_b) },
            { 2, id(port_c) },
            { 3, id(port_d) },
            { 4, id(port_e) },
            { 5, id(port_f) },
            { 6, id(port_g) },
          };
          auto port = output_map.find(port_id);
          if (port != output_map.end()) {
            ESP_LOGI("turn on switch",  "%d", port_id);
            port->second->turn_on(); // Currently always turn on, would have OVLO/UVLO here
          }
          

# The actual output pins
output:
  - id: power_led
    platform: gpio
    pin: GPIO4
# The Home Assistant switch objects
switch:
  - platform: template
    name: "Port A"
    restore_mode: RESTORE_DEFAULT_ON
    id: switch_a
    optimistic: True
    turn_off_action: 
      - switch.turn_off: port_a
    turn_on_action:
      - script.execute: 
          id: port_turn_on_safe
          port_id: 0
  - platform: template
    name: "Port B"
    restore_mode: RESTORE_DEFAULT_ON
    id: switch_b
    optimistic: True
    turn_off_action: 
      - switch.turn_off: port_b
    turn_on_action:
      - script.execute: 
          id: port_turn_on_safe
          port_id: 1
  - platform: template
    name: "Port C"
    restore_mode: RESTORE_DEFAULT_ON
    id: switch_c
    optimistic: True
    turn_off_action: 
      - switch.turn_off: port_c
    turn_on_action:
      - script.execute: 
          id: port_turn_on_safe
          port_id: 2
  - platform: template
    name: "Port D"
    restore_mode: RESTORE_DEFAULT_ON
    id: switch_d
    optimistic: True
    turn_off_action: 
      - switch.turn_off: port_d
    turn_on_action:
      - script.execute: 
          id: port_turn_on_safe
          port_id: 3
  - platform: template
    name: "Port E"
    restore_mode: RESTORE_DEFAULT_ON
    id: switch_e
    optimistic: True
    turn_off_action: 
      - switch.turn_off: port_e
    turn_on_action:
      - script.execute: 
          id: port_turn_on_safe
          port_id: 4
  - platform: template
    name: "Port F"
    restore_mode: RESTORE_DEFAULT_ON
    id: switch_f
    optimistic: True
    turn_off_action: 
      - switch.turn_off: port_f
    turn_on_action:
      - script.execute: 
          id: port_turn_on_safe
          port_id: 5
  - platform: template
    name: "Port G"
    restore_mode: RESTORE_DEFAULT_ON
    id: switch_g
    optimistic: True
    turn_off_action: 
      - switch.turn_off: port_g
    turn_on_action:
      - script.execute: 
          id: port_turn_on_safe
          port_id: 6

# The internal switch states
  - platform: gpio
    id: port_a
    pin:
      pca9554: pca9554a_device
      number: 0
      mode:
        output: true
      inverted: false
  - platform: gpio
    id: port_b
    pin:
      pca9554: pca9554a_device
      number: 1
      mode:
        output: true
      inverted: false
  - platform: gpio
    id: port_c
    pin:
      pca9554: pca9554a_device
      number: 2
      mode:
        output: true
      inverted: false
  - platform: gpio
    id: port_d
    pin:
      pca9554: pca9554a_device
      number: 3
      mode:
        output: true
      inverted: false
  - platform: gpio
    id: port_e
    pin:
      pca9554: pca9554a_device
      number: 4
      mode:
        output: true
      inverted: false
  - platform: gpio
    id: port_f
    pin:
      pca9554: pca9554a_device
      number: 5
      mode:
        output: true
      inverted: false
  - platform: gpio
    id: port_g
    pin:
      pca9554: pca9554a_device
      number: 6
      mode:
        output: true
      inverted: false


      
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      address_0:
        name: ESP IP Address 0
        id: ip1
      address_1:
        name: ESP IP Address 1
      address_2:
        name: ESP IP Address 2
      address_3:
        name: ESP IP Address 3
      address_4:
        name: ESP IP Address 4
    ssid:
      name: ESP Connected SSID
      id: wifi_ssid
    bssid:
      name: ESP Connected BSSID
      id: bssid
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results
    dns_address:
      name: ESP DNS Address
